from dns import resolver
from tabulate import tabulate
import sys
import logging
import threading
import time
from lib.file import files
from argparse import (
    ArgumentParser,
    Action,
    SUPPRESS
)
class DNSParser(ArgumentParser):
    def __init__(self):
        super(DNSParser, self).__init__()
    Infiltrationcount = 0
    tableHeader = ['Infiltration Count', 'Domain', 'Ip Addrs']
    table = []

    count = 0
    maxthreads = 10

    @staticmethod
    def dnsquery(dns,dnsuser):
        res = resolver.Resolver()
        if dnsuser!=None:
            res.nameservers = [dnsuser]
        try:
            answers = res.query((dns.strip()))
            if(answers[0].to_text()=="0.0.0.0"):
                return 0
            DNSParser.Infiltrationcount += 1
            DNSParser.table.append([DNSParser.Infiltrationcount, dns.strip(),  answers[0].to_text()])
        except Exception as e:
            pass           
        return 1

    @staticmethod
    def dns(dnsuser):
        x=threading
        line = files().readdns("\\..\\db\\hosts.txt")
        print(f)
        for f in line:
            while True:
                if threading.activeCount() <= DNSParser.maxthreads:
                    x = threading.Thread(target=DNSParser.dnsquery, args=(f,dnsuser))
                    x.start()
                    DNSParser.count += 1
                    break
        x.join()
        print(tabulate(DNSParser.table, headers=DNSParser.tableHeader, tablefmt="grid"))
        return 0

        